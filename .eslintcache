[{"/Users/abhishekchalla/Desktop/Projects/calypsu/quillmall/src/pages/thank-you.js":"1","/Users/abhishekchalla/Desktop/Projects/calypsu/quillmall/src/components/QuestionDialog.js":"2","/Users/abhishekchalla/Desktop/Projects/calypsu/quillmall/src/pages/map.js":"3","/Users/abhishekchalla/Desktop/Projects/calypsu/quillmall/src/pages/quiz-complete.js":"4","/Users/abhishekchalla/Desktop/Projects/calypsu/quillmall/src/pages/index.js":"5","/Users/abhishekchalla/Desktop/Projects/calypsu/quillmall/src/assets/documents/countries.js":"6"},{"size":168,"mtime":1607604571614,"results":"7","hashOfConfig":"8"},{"size":4468,"mtime":1607670183098,"results":"9","hashOfConfig":"8"},{"size":65649,"mtime":1607675678088,"results":"10","hashOfConfig":"8"},{"size":4180,"mtime":1607670183100,"results":"11","hashOfConfig":"8"},{"size":1472,"mtime":1607670183099,"results":"12","hashOfConfig":"8"},{"size":9226,"mtime":1607655117262,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1u5ehkx",{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/abhishekchalla/Desktop/Projects/calypsu/quillmall/src/pages/thank-you.js",["27"],"/Users/abhishekchalla/Desktop/Projects/calypsu/quillmall/src/components/QuestionDialog.js",["28","29"],"import React, { useContext, useEffect, useState } from 'react';\nimport { QuestionsContext } from '../contexts/Questions';\nimport { check_answer } from '../utils';\n\nconst replace_line_breaks = text => text.split(/\\n/).map(e => <span>{e}<br /></span>);\n\nexport default function QuestionDialog(props) {\n    const { countries, currentQuestion, changeQuestion, setCurrentQuestion, completed } = useContext(QuestionsContext);\n\n    const { show } = props;\n    const TIMER_SECONDS = 2;\n\n    const [showCorrectAnswer, setShowCorrectAnswer] = useState(false);\n    const [timer, setTimer] = useState(TIMER_SECONDS);\n\n    useEffect(() => {\n        if (showCorrectAnswer) {\n            setTimer(TIMER_SECONDS);\n            const next = () => {\n                const result = changeQuestion();\n                setShowCorrectAnswer(false);\n                if (result && result.error) alert(result.error);\n            };\n            setTimeout(next, 2000);\n        }\n    }, [showCorrectAnswer]);\n\n    useEffect(() => {\n        if (timer > 1 && showCorrectAnswer) setTimeout(() => {\n            setTimer(timer - 1);\n        }, 1000);\n    }, [timer, showCorrectAnswer]);\n\n    if (currentQuestion && show && !completed) {\n        let question = currentQuestion.question;\n        question = replace_line_breaks(question);\n\n        return (\n            <div className=\"absolute top-0 right-0 pa5\" style={{\n                height: '100vh',\n                background: 'linear-gradient(90deg, #CF4630 0%, #D04631 5%, #E3473B 60%, #EA483F 100%)',\n                width: '50vw'\n            }}>\n                <div className=\"question\">\n                    <div className=\"pv5 tc\">\n                        <span style={{border: \"5px dashed white\", borderRadius: \"50%\", padding: \"0px 30px\", fontSize: \"2.5rem\", color: \"white\"}}>\n                            {countries.filter(q => q.done).length}\n                        </span>\n                        <span className=\"pl3\" style={{fontSize: \"2.5rem\", color: \"white\"}}>\n                        السؤال\n                        </span>    \n                    </div> \n                    <div className=\"pv4 tr\" style={{ fontSize: \"2rem\", color: \"white\"}}>\n                    {question}\n                    </div>\n                    <ul style={{listStyleType: \"none\", paddingInlineStart: \"0\"}}>\n                        {currentQuestion.options.map((option, index) => (\n                            <li className=\"option mv4\" key={index}>\n                                <button style={{fontSize: \"2rem\", padding: \"20px 40px\", \n                                border: \"10px solid #054BC8\", \n                                borderRadius: \"20px\", width: \"100%\"}} { ...(!showCorrectAnswer ? {\n                                    onClick: () => {\n                                        setCurrentQuestion({\n                                            ...currentQuestion,\n                                            answer: index\n                                        })\n                                        setShowCorrectAnswer(true)\n                                    },\n                                } : {\n                                    // SET CLASSNAME FOR RIGHT OR WRONG HERE\n                                    id: check_answer(currentQuestion, index) ? 'correct' : 'wrong'\n                                }) }>\n                                    {option}\n                                </button>\n                            </li>\n                        ))}\n                    </ul>\n                    {!showCorrectAnswer ?\n                        ''\n                        :\n                        <>\n                            <span style={{color: \"white\", fontSize: \"1.5rem\"}}></span>\n                            {currentQuestion.answer == currentQuestion.correct_answer ?\n                                <audio autoplay=\"true\">\n                                    <source src={require('../assets/sounds/correct.wav').default} type=\"audio/wav\" />\n                                </audio>\n                                :\n                                <audio autoplay=\"true\">\n                                    <source src={require('../assets/sounds/incorrect.wav').default} type=\"audio/wav\" />\n                                </audio>\n                            }\n                        </>\n                    }\n                </div>\n            </div>\n        );\n    } else {\n        return (<></>)\n    }\n}","/Users/abhishekchalla/Desktop/Projects/calypsu/quillmall/src/pages/map.js",["30","31","32","33","34","35","36"],"/Users/abhishekchalla/Desktop/Projects/calypsu/quillmall/src/pages/quiz-complete.js",[],"/Users/abhishekchalla/Desktop/Projects/calypsu/quillmall/src/pages/index.js",[],"/Users/abhishekchalla/Desktop/Projects/calypsu/quillmall/src/assets/documents/countries.js",[],{"ruleId":"37","severity":1,"message":"38","line":1,"column":17,"nodeType":"39","messageId":"40","endLine":1,"endColumn":25},{"ruleId":"41","severity":1,"message":"42","line":26,"column":8,"nodeType":"43","endLine":26,"endColumn":27,"suggestions":"44"},{"ruleId":"45","severity":1,"message":"46","line":83,"column":53,"nodeType":"47","messageId":"48","endLine":83,"endColumn":55},{"ruleId":"37","severity":1,"message":"49","line":10,"column":24,"nodeType":"39","messageId":"40","endLine":10,"endColumn":33},{"ruleId":"45","severity":1,"message":"50","line":33,"column":46,"nodeType":"47","messageId":"48","endLine":33,"endColumn":48},{"ruleId":"45","severity":1,"message":"46","line":37,"column":30,"nodeType":"47","messageId":"48","endLine":37,"endColumn":32},{"ruleId":"41","severity":1,"message":"51","line":45,"column":8,"nodeType":"43","endLine":45,"endColumn":10,"suggestions":"52"},{"ruleId":"45","severity":1,"message":"46","line":49,"column":79,"nodeType":"47","messageId":"48","endLine":49,"endColumn":81},{"ruleId":"41","severity":1,"message":"53","line":58,"column":8,"nodeType":"43","endLine":58,"endColumn":24,"suggestions":"54"},{"ruleId":"55","severity":1,"message":"56","line":229,"column":17,"nodeType":"57","endLine":229,"endColumn":126},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'changeQuestion'. Either include it or remove the dependency array.","ArrayExpression",["58"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'countries' is assigned a value but never used.","Expected '!==' and instead saw '!='.","React Hook useEffect has a missing dependency: 'resetQuestionsContext'. Either include it or remove the dependency array.",["59"],"React Hook useEffect has a missing dependency: 'countryPointers'. Either include it or remove the dependency array.",["60"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"61","fix":"62"},{"desc":"63","fix":"64"},{"desc":"65","fix":"66"},"Update the dependencies array to be: [changeQuestion, showCorrectAnswer]",{"range":"67","text":"68"},"Update the dependencies array to be: [resetQuestionsContext]",{"range":"69","text":"70"},"Update the dependencies array to be: [countryPointers, currentCountry]",{"range":"71","text":"72"},[958,977],"[changeQuestion, showCorrectAnswer]",[1696,1698],"[resetQuestionsContext]",[2234,2250],"[countryPointers, currentCountry]"]