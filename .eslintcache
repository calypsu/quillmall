[{"/Users/aanandmadhav/git/quillmall/src/contexts/Questions.js":"1","/Users/aanandmadhav/git/quillmall/src/utils.js":"2","/Users/aanandmadhav/git/quillmall/src/components/QuestionDialog.js":"3","/Users/aanandmadhav/git/quillmall/src/pages/quiz-complete.js":"4","/Users/aanandmadhav/git/quillmall/src/pages/map.js":"5","/Users/aanandmadhav/git/quillmall/src/pages/index.js":"6"},{"size":3000,"mtime":1607649603787,"results":"7","hashOfConfig":"8"},{"size":202,"mtime":1607622993472,"results":"9","hashOfConfig":"8"},{"size":4537,"mtime":1607651215636,"results":"10","hashOfConfig":"8"},{"size":3756,"mtime":1607654129060,"results":"11","hashOfConfig":"8"},{"size":64767,"mtime":1607656711238,"results":"12","hashOfConfig":"8"},{"size":1347,"mtime":1607656681544,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"17"},"q5bnvd",{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/aanandmadhav/git/quillmall/src/contexts/Questions.js",["29","30","31","32","33","34","35"],"import React, { useEffect, useState } from 'react';\nimport { sendError, gen_random, check_answer } from '../utils';\nimport { countries as DefaultCountryList } from '../assets/documents/countries';\n\nexport const QuestionsContext = React.createContext();\n\nconst _question = (question, options, correct_answer) => ({ question, options, correct_answer });\n\nexport default function QuestionsContextProvider({ children }) {\n\n    const [countries, setCountries] = useState([]);\n    const [currentQuestion, setCurrentQuestion] = useState(null);\n    const [currentCountry, setCurrentCountry] = useState(null);\n    const [completed, setCompleted] = useState(false);\n    const [score, setScore] = useState(0);\n\n    const fetchCountries = () => {\n        const data = JSON.parse(JSON.stringify(DefaultCountryList));\n        setCountries(data);\n    }\n\n    const setNewQuestion = (country_name = null) => {\n        const remaining_countries = countries.filter(country => !country.done);\n\n        let country_index = -1;\n        if (country_name == null) country_index = gen_random(remaining_countries.length);\n        else remaining_countries.map((country, index) => {\n            if (country.name == country_name) country_index = index;\n        });\n\n        // REMOVE AFTER GETTING DATA\n        country_index = (country_index == -1) ? 0 : country_index;\n        \n        const current_country = { ...remaining_countries[country_index] };\n        const current_question = current_country.questions[gen_random(current_country.questions.length)];\n        \n        const removed_country = remaining_countries.splice(country_index, 1)[0];\n        removed_country.done = true;\n\n        setCountries([\n            ...countries.filter(country => country.done),\n            ...remaining_countries\n        ]);\n        setCurrentCountry(current_country);\n        setCurrentQuestion(current_question);\n    }\n\n    const changeQuestion = () => {\n        if (currentQuestion.answer == -1) {\n            return sendError(\"Current question isn't answered\");\n        } else {\n            const isCorrect = check_answer(currentQuestion, currentQuestion.answer);\n            setScore(isCorrect ? score + 1 : score);\n            if (countries.filter(country => !country.done).length == 0) {\n                setCompleted(true);\n            } else {\n                setNewQuestion();\n                return true;\n            }\n        }\n    }\n\n    const resetQuestionsContext = () => {\n        fetchCountries();\n        setCurrentQuestion(false);\n        setCurrentCountry(null);\n        setCompleted(false);\n        setScore(0);\n    }\n\n    return (\n        <QuestionsContext.Provider\n            value={{\n                currentQuestion, setCurrentQuestion,\n                currentCountry,\n                changeQuestion,\n                completed,\n                score,\n                setNewQuestion,\n                resetQuestionsContext\n            }}\n        >\n            {children}\n        </QuestionsContext.Provider>\n    );\n}",["36","37"],"/Users/aanandmadhav/git/quillmall/src/utils.js",["38"],"/Users/aanandmadhav/git/quillmall/src/components/QuestionDialog.js",["39","40"],"import React, { useContext, useEffect, useState } from 'react';\nimport { QuestionsContext } from '../contexts/Questions';\nimport { check_answer } from '../utils';\n\nconst replace_line_breaks = text => text.split(/\\n/).map(e => <span>{e}<br /></span>);\n\nexport default function QuestionDialog(props) {\n    const { currentQuestion, changeQuestion, setCurrentQuestion, completed } = useContext(QuestionsContext);\n\n    const { show } = props;\n    const TIMER_SECONDS = 2;\n\n    const [showCorrectAnswer, setShowCorrectAnswer] = useState(false);\n    const [timer, setTimer] = useState(TIMER_SECONDS);\n\n    useEffect(() => {\n        if (showCorrectAnswer) {\n            setTimer(TIMER_SECONDS);\n            const next = () => {\n                const result = changeQuestion();\n                setShowCorrectAnswer(false);\n                if (result && result.error) alert(result.error);\n            };\n            setTimeout(next, 2000);\n        }\n    }, [showCorrectAnswer]);\n\n    useEffect(() => {\n        if (timer > 1 && showCorrectAnswer) setTimeout(() => {\n            console.log(timer);\n            setTimer(timer - 1);\n        }, 1000);\n    }, [timer, showCorrectAnswer]);\n\n    if (currentQuestion && show && !completed) {\n        let question = currentQuestion.question;\n        question = replace_line_breaks(question);\n\n        return (\n            <div className=\"absolute top-0 right-0 pv5 ph6\" style={{\n                height: '100vh',\n                background: 'linear-gradient(90deg, #CF4630 0%, #D04631 5%, #E3473B 60%, #EA483F 100%)',\n                width: '50vw'\n            }}>\n                <div className=\"question\">\n                    <div className=\"pv5 tc\">\n                        <span style={{border: \"5px dashed white\", borderRadius: \"50%\", padding: \"10px 30px\", fontSize: \"3.25rem\", color: \"white\"}}>\n                            2\n                        </span>\n                        <span className=\"pl3\" style={{fontSize: \"3.25rem\", color: \"white\"}}>\n                        السؤال\n                        </span>    \n                    </div> \n                    <div className=\"pv4\" style={{ fontSize: \"3.25rem\", color: \"white\"}}>\n                    {question}\n                    </div>\n                    <ul style={{listStyleType: \"none\", paddingInlineStart: \"0\"}}>\n                        {currentQuestion.options.map((option, index) => (\n                            <li className=\"option mv4\" key={index}>\n                                <button style={{fontSize: \"3.25rem\", color: \"black\", padding: \"20px 40px\", \n                                border: \"10px solid #054BC8\", background: \"white\", \n                                borderRadius: \"20px\", width: \"100%\"}} { ...(!showCorrectAnswer ? {\n                                    onClick: () => {\n                                        setCurrentQuestion({\n                                            ...currentQuestion,\n                                            answer: index\n                                        })\n                                        setShowCorrectAnswer(true)\n                                    }\n                                } : {\n                                    // SET CLASSNAME FOR RIGHT OR WRONG HERE\n                                    className: check_answer(currentQuestion, index) ? 'correct' : 'wrong'\n                                }) }>\n                                    {option}\n                                </button>\n                            </li>\n                        ))}\n                    </ul>\n                    {!showCorrectAnswer ?\n                        ''\n                        :\n                        <>\n                            <span style={{color: \"white\", fontSize: \"1.5rem\"}}>Next question in {timer} seconds</span>\n                            {currentQuestion.answer == currentQuestion.correct_answer ?\n                                <audio autoplay=\"true\">\n                                    <source src={require('../assets/sounds/correct.wav').default} type=\"audio/wav\" />\n                                </audio>\n                                :\n                                <audio autoplay=\"true\">\n                                    <source src={require('../assets/sounds/incorrect.wav').default} type=\"audio/wav\" />\n                                </audio>\n                            }\n                        </>\n                    }\n                </div>\n            </div>\n        );\n    } else {\n        return (<></>)\n    }\n}","/Users/aanandmadhav/git/quillmall/src/pages/quiz-complete.js",[],"/Users/aanandmadhav/git/quillmall/src/pages/map.js",["41","42","43","44","45"],"/Users/aanandmadhav/git/quillmall/src/pages/index.js",[],{"ruleId":"46","severity":1,"message":"47","line":1,"column":17,"nodeType":"48","messageId":"49","endLine":1,"endColumn":26},{"ruleId":"46","severity":1,"message":"50","line":7,"column":7,"nodeType":"48","messageId":"49","endLine":7,"endColumn":16},{"ruleId":"51","severity":1,"message":"52","line":27,"column":55,"nodeType":"53","messageId":"54","endLine":27,"endColumn":57},{"ruleId":"55","severity":1,"message":"56","line":28,"column":30,"nodeType":"57","messageId":"58","endLine":28,"endColumn":32},{"ruleId":"55","severity":1,"message":"56","line":32,"column":40,"nodeType":"57","messageId":"58","endLine":32,"endColumn":42},{"ruleId":"55","severity":1,"message":"56","line":49,"column":36,"nodeType":"57","messageId":"58","endLine":49,"endColumn":38},{"ruleId":"55","severity":1,"message":"56","line":54,"column":67,"nodeType":"57","messageId":"58","endLine":54,"endColumn":69},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"55","severity":1,"message":"56","line":5,"column":75,"nodeType":"57","messageId":"58","endLine":5,"endColumn":77},{"ruleId":"63","severity":1,"message":"64","line":26,"column":8,"nodeType":"65","endLine":26,"endColumn":27,"suggestions":"66"},{"ruleId":"55","severity":1,"message":"56","line":84,"column":53,"nodeType":"57","messageId":"58","endLine":84,"endColumn":55},{"ruleId":"55","severity":1,"message":"67","line":30,"column":46,"nodeType":"57","messageId":"58","endLine":30,"endColumn":48},{"ruleId":"63","severity":1,"message":"68","line":36,"column":8,"nodeType":"65","endLine":36,"endColumn":10,"suggestions":"69"},{"ruleId":"55","severity":1,"message":"56","line":40,"column":79,"nodeType":"57","messageId":"58","endLine":40,"endColumn":81},{"ruleId":"63","severity":1,"message":"70","line":47,"column":8,"nodeType":"65","endLine":47,"endColumn":24,"suggestions":"71"},{"ruleId":"72","severity":1,"message":"73","line":218,"column":17,"nodeType":"74","endLine":218,"endColumn":78},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'_question' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-native-reassign",["75"],"no-negated-in-lhs",["76"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'changeQuestion'. Either include it or remove the dependency array.","ArrayExpression",["77"],"Expected '!==' and instead saw '!='.","React Hook useEffect has a missing dependency: 'resetQuestionsContext'. Either include it or remove the dependency array.",["78"],"React Hook useEffect has a missing dependency: 'countryPointers'. Either include it or remove the dependency array.",["79"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"80","fix":"81"},{"desc":"82","fix":"83"},{"desc":"84","fix":"85"},"Update the dependencies array to be: [changeQuestion, showCorrectAnswer]",{"range":"86","text":"87"},"Update the dependencies array to be: [resetQuestionsContext]",{"range":"88","text":"89"},"Update the dependencies array to be: [countryPointers, currentCountry]",{"range":"90","text":"91"},[947,966],"[changeQuestion, showCorrectAnswer]",[1323,1325],"[resetQuestionsContext]",[1744,1760],"[countryPointers, currentCountry]"]