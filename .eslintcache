[{"/Users/aanandmadhav/git/quillmall/src/contexts/Questions.js":"1","/Users/aanandmadhav/git/quillmall/src/components/QuestionDialog.js":"2","/Users/aanandmadhav/git/quillmall/src/pages/index.js":"3","/Users/aanandmadhav/git/quillmall/src/index.js":"4","/Users/aanandmadhav/git/quillmall/src/App.js":"5","/Users/aanandmadhav/git/quillmall/src/contexts/Form.js":"6","/Users/aanandmadhav/git/quillmall/src/pages/quiz-complete.js":"7","/Users/aanandmadhav/git/quillmall/src/pages/map.js":"8"},{"size":3383,"mtime":1607622993470,"results":"9","hashOfConfig":"10"},{"size":2683,"mtime":1607622993470,"results":"11","hashOfConfig":"10"},{"size":1347,"mtime":1607628989496,"results":"12","hashOfConfig":"10"},{"size":686,"mtime":1607626053711,"results":"13","hashOfConfig":"10"},{"size":691,"mtime":1607626841782,"results":"14","hashOfConfig":"10"},{"size":298,"mtime":1607622993470,"results":"15","hashOfConfig":"10"},{"size":451,"mtime":1607622993472,"results":"16","hashOfConfig":"10"},{"size":62893,"mtime":1607630615273,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"q5bnvd",{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/aanandmadhav/git/quillmall/src/contexts/Questions.js",["35","36","37"],"/Users/aanandmadhav/git/quillmall/src/components/QuestionDialog.js",["38"],"import React, { useContext, useState } from 'react';\nimport { QuestionsContext } from '../contexts/Questions';\nimport { check_answer } from '../utils';\n\nconst replace_line_breaks = text => text.split(/\\n/).map(e => <span>{e}<br /></span>);\n\nexport default function QuestionDialog(props) {\n    const { currentQuestion, changeQuestion, setCurrentQuestion, completed } = useContext(QuestionsContext);\n\n    const { show } = props;\n\n    const [selectedAnswer, setSelectedAnswer] = useState(-1);\n    const [showCorrectAnswer, setShowCorrectAnswer] = useState(false);\n\n    if (currentQuestion && show && !completed) {\n        let question = currentQuestion.question;\n        question = replace_line_breaks(question);\n\n        return (\n            <div className=\"absolute top-0 right-0\" style={{\n                height: '100vh',\n                background: '#eee',\n                width: '50vw'\n            }}>\n                <div className=\"question\">\n                    {question}\n                    <ul>\n                        {currentQuestion.options.map((option, index) => (\n                            <li className=\"option\" key={index}>\n                                <button {...(!showCorrectAnswer ? {\n                                    onClick: () => setSelectedAnswer(index),\n                                    // SET CLASSNAME FOR SELECTED HERE\n                                    className: selectedAnswer == index ? 'selected': ''\n                                } : {\n                                    // SET CLASSNAME FOR RIGHT OR WRONG HERE\n                                    className: check_answer(currentQuestion, index) ? 'correct' : 'wrong'\n                                })}>\n                                    {option}\n                                </button>\n                            </li>\n                        ))}\n                    </ul>\n                    {!showCorrectAnswer ?\n                        <button onClick={() => {\n                            setCurrentQuestion({\n                                ...currentQuestion,\n                                answer: selectedAnswer\n                            })\n                            setShowCorrectAnswer(true)\n                        }}>Submit</button>\n                        :\n                        <button onClick={() => {\n                            const result = changeQuestion();\n                            setShowCorrectAnswer(false);\n                            if (result && result.error) alert(result.error);\n                        }}>Next</button>\n                    }\n                </div>\n            </div>\n        );\n    } else {\n        return (<></>)\n    }\n}","/Users/aanandmadhav/git/quillmall/src/pages/index.js",[],"/Users/aanandmadhav/git/quillmall/src/index.js",[],"/Users/aanandmadhav/git/quillmall/src/App.js",[],"/Users/aanandmadhav/git/quillmall/src/contexts/Form.js",[],"/Users/aanandmadhav/git/quillmall/src/pages/quiz-complete.js",[],"/Users/aanandmadhav/git/quillmall/src/pages/map.js",["39"],{"ruleId":"40","severity":1,"message":"41","line":65,"column":67,"nodeType":"42","messageId":"43","endLine":65,"endColumn":69},{"ruleId":"44","severity":1,"message":"45","line":82,"column":8,"nodeType":"46","endLine":82,"endColumn":34,"suggestions":"47"},{"ruleId":"44","severity":1,"message":"48","line":82,"column":9,"nodeType":"49","endLine":82,"endColumn":33},{"ruleId":"40","severity":1,"message":"41","line":33,"column":63,"nodeType":"42","messageId":"43","endLine":33,"endColumn":65},{"ruleId":"50","severity":1,"message":"51","line":9,"column":13,"nodeType":"52","messageId":"53","endLine":9,"endColumn":22},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'countries' and 'setNewQuestion'. Either include them or remove the dependency array.","ArrayExpression",["54"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","no-unused-vars","'countries' is assigned a value but never used.","Identifier","unusedVar",{"desc":"55","fix":"56"},"Update the dependencies array to be: [countries, setNewQuestion]",{"range":"57","text":"58"},[3025,3051],"[countries, setNewQuestion]"]